name: VRS-Factory Docker CI

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  pull_request:
    types:
      - opened
      - synchronize
  release:
    types:
      - published

permissions:
  id-token: write
  contents: read

env:
  SOURCE_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  VERSION_COMMIT: ${{ github.sha }}
  REGISTRY_IMAGE: vertisan/pulselink-user-service
  TEST_REPORT_ARTIFACT: test-report-${{ github.sha }}

jobs:
  credentials:
    runs-on: ubuntu-latest
    container:
      image: vertisan/dind:latest
    outputs:
      CODEARTIFACT_AUTH_TOKEN: ${{ steps.export-tokens.outputs.CODEARTIFACT_AUTH_TOKEN }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_CODE_ROLE_ARN }}
          role-session-name: github-pulselink-code
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get token for CodeArtifact
        id: export-tokens
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain ${{ secrets.AWS_CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text --duration-seconds 900`
          if [ -z "$CODEARTIFACT_AUTH_TOKEN" ]; then echo "Cannot get auth token(s) for CI/CD"; exit 1; fi
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> $GITHUB_OUTPUT

  pack:
    needs: [credentials]
    runs-on: ubuntu-latest
    container:
      image: vertisan/dind:latest
    env:
      CODEARTIFACT_AUTH_TOKEN: ${{ needs.credentials.outputs.CODEARTIFACT_AUTH_TOKEN }}
    steps:
      - name: Setup job
        run: |
          if [ -z "$CODEARTIFACT_AUTH_TOKEN" ]; then echo "The required envs are missing!"; exit 1; fi
          echo "VERSION_PACK=pack.$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV

      - name: Login into Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the Docker image
        run: |
          docker pull ${{ env.REGISTRY_IMAGE }}:latest || echo "There is no LATEST to be pulled"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build a Docker image
        run: |
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg CODEARTIFACT_AUTH_TOKEN=${CODEARTIFACT_AUTH_TOKEN} \
            --cache-from ${{ env.REGISTRY_IMAGE }}:latest \
            --target packer \
            --pull -f ./Dockerfile -t ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_PACK }} .

      - name: Push the Docker image
        run: |
          docker push ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_PACK }}

  test:
    needs: [credentials, pack]
    runs-on: ubuntu-latest
    # TODO: Solve a problem with a missing directory from container
    # container:
    #   image: vertisan/dind:latest
    env:
      CODEARTIFACT_AUTH_TOKEN: ${{ needs.credentials.outputs.CODEARTIFACT_AUTH_TOKEN }}
    steps:
      - name: Setup job
        run: |
          if [ -z "$CODEARTIFACT_AUTH_TOKEN" ]; then echo "The required envs are missing!"; exit 1; fi
          echo "VERSION_PACK=pack.$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV

      - name: Login into Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the Docker image
        run: |
          docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_PACK }} || echo "There is no PACK to be pulled"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tests
        run: |
          cp .env.test .env || cp .env.dist .env || touch .env
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> .env
          docker tag ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_PACK }} ${{ env.REGISTRY_IMAGE }}:latest

      - name: Run tests
        run: |
          docker compose -f docker/docker-compose.yml -f docker/docker-compose.test.yml --env-file .env down --volumes --remove-orphans --rmi local
          docker compose -f docker/docker-compose.yml -f docker/docker-compose.test.yml --env-file .env up --force-recreate --renew-anon-volumes --abort-on-container-exit --exit-code-from user-svc-api

      - name: Store tests results
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TEST_REPORT_ARTIFACT }}
          path: .test-reports
          retention-days: 7

      - name: Clean up
        run: |
          docker compose -f docker/docker-compose.yml -f docker/docker-compose.test.yml --env-file .env down --volumes --remove-orphans --rmi local

  build:
    needs: [credentials, test]
    if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch || github.event_name == 'release' && github.event.action == 'published' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    container:
      image: vertisan/dind:latest
    env:
      CODEARTIFACT_AUTH_TOKEN: ${{ needs.credentials.outputs.CODEARTIFACT_AUTH_TOKEN }}
    steps:
      - name: Setup job
        run: |
          if [ -z "$CODEARTIFACT_AUTH_TOKEN" ]; then echo "The required envs are missing!"; exit 1; fi
          echo "VERSION_PACK=pack.$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV

      - name: Login into Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the Docker image
        run: |
          docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_BRANCH }} \
          || echo "There is no BRANCH version to be pulled"; docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_PACK }} \
          || echo "There is no PACK version to be pulled"; docker pull ${{ env.REGISTRY_IMAGE }}:latest \
          || echo "No cache to use"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg CODEARTIFACT_AUTH_TOKEN=${CODEARTIFACT_AUTH_TOKEN} \
          --cache-from ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_BRANCH }} \
          --cache-from ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_PACK }} \
          --cache-from ${{ env.REGISTRY_IMAGE }}:latest \
          --pull -f ./Dockerfile -t ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_COMMIT }} .

      - name: Push the Docker image
        run: |
          docker push ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_COMMIT }}

  release:
    needs: [build]
    if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch || github.event_name == 'release' && github.event.action == 'published' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    container:
      image: vertisan/dind:latest
    env:
      SOURCE_BRANCH_NAME: ${{ github.ref_name == github.event.repository.default_branch && 'latest' || github.ref_name }}
    steps:
      - name: Setup job
        run: |
          echo "VERSION_BRANCH=$(echo $SOURCE_BRANCH_NAME | sed 's/\//-/g')" >> $GITHUB_ENV

      - name: Login into Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the Docker image
        run: |
          docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_COMMIT }}

      - name: Release image with reference
        run: |
          docker tag ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_COMMIT }} ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_BRANCH }}

      - name: Push the Docker image
        run: |
          docker push ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_BRANCH }}

  report:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    container:
      image: vertisan/dind:latest
    steps:
      - name: Download test reports
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TEST_REPORT_ARTIFACT }}

      - name: Generate test reports
        uses: ArtiomTr/jest-coverage-report-action@v2
        if: success()
        with:
          coverage-file: ./report.json
          base-coverage-file: ./report.json
          annotations: none
          threshold: 90
